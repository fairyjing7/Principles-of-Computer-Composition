// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/05/2022 18:29:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          UPC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UPC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg FC;
reg FZ;
reg [7:2] IR;
reg RST;
reg SWA;
reg SWB;
reg T1;
reg T2;
reg T3;
// wires                                               
wire ALU_B;
wire DOUT_B;
wire LDAR;
wire LDDR1;
wire LDDR2;
wire LDIR;
wire LDPC;
wire LDRI;
wire LOAD;
wire [24:1] M;
wire PC_B;
wire RAM_B;
wire RD_B;
wire RJ_B;
wire RS_B;
wire SFT_B;
wire SW_B;
wire [5:0] uA;

// assign statements (if any)                          
UPC i1 (
// port map - connection between master ports and signals/registers   
	.ALU_B(ALU_B),
	.DOUT_B(DOUT_B),
	.FC(FC),
	.FZ(FZ),
	.IR(IR),
	.LDAR(LDAR),
	.LDDR1(LDDR1),
	.LDDR2(LDDR2),
	.LDIR(LDIR),
	.LDPC(LDPC),
	.LDRI(LDRI),
	.LOAD(LOAD),
	.M(M),
	.PC_B(PC_B),
	.RAM_B(RAM_B),
	.RD_B(RD_B),
	.RJ_B(RJ_B),
	.RS_B(RS_B),
	.RST(RST),
	.SFT_B(SFT_B),
	.SW_B(SW_B),
	.SWA(SWA),
	.SWB(SWB),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.uA(uA)
);
initial 
begin 
#1000000 $stop;
end 

// RST
initial
begin
	RST = 1'b0;
	RST = #10000 1'b1;
	RST = #20000 1'b0;
end 

// SWA
initial
begin
	SWA = 1'b0;
	SWA = #20000 1'b1;
	SWA = #880000 1'b0;
end 

// SWB
initial
begin
	SWB = 1'b0;
	SWB = #20000 1'b1;
	SWB = #880000 1'b0;
end 

// IR[7]
initial
begin
	IR[7] = 1'b0;
	IR[7] = #60000 1'b1;
	IR[7] = #780000 1'b0;
end 

// IR[6]
initial
begin
	IR[6] = 1'b0;
	IR[6] = #710000 1'b1;
	IR[6] = #130000 1'b0;
end 

// IR[5]
initial
begin
	IR[5] = 1'b0;
	IR[5] = #220000 1'b1;
	IR[5] = #180000 1'b0;
	IR[5] = #100000 1'b1;
	IR[5] = #210000 1'b0;
end 

// IR[4]
initial
begin
	IR[4] = 1'b0;
	IR[4] = #130000 1'b1;
	IR[4] = #90000 1'b0;
	IR[4] = #80000 1'b1;
	IR[4] = #200000 1'b0;
	IR[4] = #110000 1'b1;
	IR[4] = #100000 1'b0;
end 

// IR[3]
initial
begin
	IR[3] = 1'b0;
end 

// IR[2]
initial
begin
	IR[2] = 1'b0;
end 

// T1
initial
begin
	T1 = 1'b0;
	T1 = #20000 1'b1;
	T1 = #10000 1'b0;
	T1 = #40000 1'b1;
	T1 = #10000 1'b0;
	T1 = #60000 1'b1;
	T1 = #10000 1'b0;
	T1 = #80000 1'b1;
	T1 = #10000 1'b0;
	T1 = #80000 1'b1;
	T1 = #10000 1'b0;
	T1 = #90000 1'b1;
	T1 = #10000 1'b0;
	T1 = #90000 1'b1;
	T1 = #10000 1'b0;
	T1 = #100000 1'b1;
	T1 = #10000 1'b0;
	T1 = #100000 1'b1;
	T1 = #10000 1'b0;
	T1 = #100000 1'b1;
	T1 = #10000 1'b0;
	T1 = #90000 1'b1;
	T1 = #10000 1'b0;
end 

// T2
initial
begin
	T2 = 1'b0;
	T2 = #40000 1'b1;
	T2 = #10000 1'b0;
	T2 = #40000 1'b1;
	T2 = #10000 1'b0;
	T2 = #70000 1'b1;
	T2 = #10000 1'b0;
	T2 = #80000 1'b1;
	T2 = #10000 1'b0;
	T2 = #80000 1'b1;
	T2 = #10000 1'b0;
	T2 = #90000 1'b1;
	T2 = #10000 1'b0;
	T2 = #100000 1'b1;
	T2 = #10000 1'b0;
	T2 = #90000 1'b1;
	T2 = #10000 1'b0;
	T2 = #110000 1'b1;
	T2 = #10000 1'b0;
	T2 = #80000 1'b1;
	T2 = #10000 1'b0;
	T2 = #90000 1'b1;
	T2 = #10000 1'b0;
end 
endmodule

