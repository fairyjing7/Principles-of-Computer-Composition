// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/24/2021 20:19:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          REGSMD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module REGSMD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg LDAR;
reg LDIR;
reg LDPC;
reg LED_B;
reg LOAD;
reg PC_B;
reg [7:0] RAM;
reg RAM_B;
reg RST;
reg T2;
reg T4;
// wires                                               
wire [7:0] AR;
wire [7:0] BUS;
wire [7:0] DOUT;
wire [7:0] IR;
wire [7:0] PC;

// assign statements (if any)                          
REGSMD i1 (
// port map - connection between master ports and signals/registers   
	.AR(AR),
	.BUS(BUS),
	.DOUT(DOUT),
	.IR(IR),
	.LDAR(LDAR),
	.LDIR(LDIR),
	.LDPC(LDPC),
	.LED_B(LED_B),
	.LOAD(LOAD),
	.PC(PC),
	.PC_B(PC_B),
	.RAM(RAM),
	.RAM_B(RAM_B),
	.RST(RST),
	.T2(T2),
	.T4(T4)
);
initial 
begin 
#2000000 $finish;
end 

// RST
initial
begin
	RST = 1'b0;
	RST = #10000 1'b1;
	RST = #10000 1'b0;
end 
// RAM[ 7 ]
initial
begin
	RAM[7] = 1'b0;
	RAM[7] = #270000 1'b1;
	RAM[7] = #240000 1'b0;
	RAM[7] = #770000 1'b1;
	RAM[7] = #300000 1'b0;
end 
// RAM[ 6 ]
initial
begin
	RAM[6] = 1'b0;
	RAM[6] = #980000 1'b1;
	RAM[6] = #300000 1'b0;
end 
// RAM[ 5 ]
initial
begin
	RAM[5] = 1'b1;
	RAM[5] = #1280000 1'b0;
end 
// RAM[ 4 ]
initial
begin
	RAM[4] = 1'b0;
	RAM[4] = #980000 1'b1;
	RAM[4] = #600000 1'b0;
end 
// RAM[ 3 ]
initial
begin
	RAM[3] = 1'b0;
	RAM[3] = #980000 1'b1;
	RAM[3] = #300000 1'b0;
end 
// RAM[ 2 ]
initial
begin
	RAM[2] = 1'b1;
	RAM[2] = #980000 1'b0;
end 
// RAM[ 1 ]
initial
begin
	RAM[1] = 1'b0;
	RAM[1] = #510000 1'b1;
	RAM[1] = #470000 1'b0;
end 
// RAM[ 0 ]
initial
begin
	RAM[0] = 1'b1;
	RAM[0] = #270000 1'b0;
	RAM[0] = #480000 1'b1;
	RAM[0] = #230000 1'b0;
	RAM[0] = #300000 1'b1;
	RAM[0] = #300000 1'b0;
end 

// RAM_B
initial
begin
	RAM_B = 1'b0;
	RAM_B = #190000 1'b1;
	RAM_B = #60000 1'b0;
	RAM_B = #290000 1'b1;
	RAM_B = #70000 1'b0;
	RAM_B = #470000 1'b1;
	RAM_B = #60000 1'b0;
	RAM_B = #260000 1'b1;
	RAM_B = #80000 1'b0;
end 

// PC_B
initial
begin
	PC_B = 1'b0;
	PC_B = #250000 1'b1;
	PC_B = #40000 1'b0;
	PC_B = #230000 1'b1;
	PC_B = #30000 1'b0;
	PC_B = #50000 1'b1;
	PC_B = #30000 1'b0;
	PC_B = #410000 1'b1;
	PC_B = #80000 1'b0;
	PC_B = #140000 1'b1;
	PC_B = #60000 1'b0;
end 

// LOAD
initial
begin
	LOAD = 1'b0;
	LOAD = #820000 1'b1;
	LOAD = #80000 1'b0;
end 

// LDAR
initial
begin
	LDAR = 1'b0;
	LDAR = #250000 1'b1;
	LDAR = #50000 1'b0;
	LDAR = #220000 1'b1;
	LDAR = #30000 1'b0;
	LDAR = #50000 1'b1;
	LDAR = #20000 1'b0;
	LDAR = #400000 1'b1;
	LDAR = #40000 1'b0;
	LDAR = #20000 1'b1;
	LDAR = #60000 1'b0;
	LDAR = #120000 1'b1;
	LDAR = #80000 1'b0;
end 

// LDPC
initial
begin
	LDPC = 1'b0;
	LDPC = #30000 1'b1;
	LDPC = #30000 1'b0;
	LDPC = #330000 1'b1;
	LDPC = #30000 1'b0;
	LDPC = #310000 1'b1;
	LDPC = #50000 1'b0;
	LDPC = #40000 1'b1;
	LDPC = #60000 1'b0;
	LDPC = #300000 1'b1;
	LDPC = #60000 1'b0;
	LDPC = #280000 1'b1;
	LDPC = #60000 1'b0;
end 

// T4
initial
begin
	T4 = 1'b0;
	T4 = #40000 1'b1;
	T4 = #10000 1'b0;
	T4 = #350000 1'b1;
	T4 = #10000 1'b0;
	T4 = #340000 1'b1;
	T4 = #10000 1'b0;
	T4 = #80000 1'b1;
	T4 = #20000 1'b0;
	T4 = #340000 1'b1;
	T4 = #20000 1'b0;
	T4 = #320000 1'b1;
	T4 = #20000 1'b0;
end 

// T2
initial
begin
	T2 = 1'b0;
	T2 = #190000 1'b1;
	T2 = #10000 1'b0;
	T2 = #40000 1'b1;
	T2 = #10000 1'b0;
	T2 = #20000 1'b1;
	T2 = #10000 1'b0;
	T2 = #120000 1'b1;
	T2 = #10000 1'b0;
	T2 = #120000 1'b1;
	T2 = #10000 1'b0;
	T2 = #20000 1'b1;
	T2 = #10000 1'b0;
	T2 = #30000 1'b1;
	T2 = #10000 1'b0;
	T2 = #410000 1'b1;
	T2 = #20000 1'b0;
	T2 = #40000 1'b1;
	T2 = #20000 1'b0;
	T2 = #40000 1'b1;
	T2 = #20000 1'b0;
	T2 = #120000 1'b1;
	T2 = #20000 1'b0;
	T2 = #120000 1'b1;
	T2 = #40000 1'b0;
end 

// LDIR
initial
begin
	LDIR = 1'b0;
	LDIR = #180000 1'b1;
	LDIR = #30000 1'b0;
	LDIR = #340000 1'b1;
	LDIR = #30000 1'b0;
	LDIR = #520000 1'b1;
	LDIR = #80000 1'b0;
end 

// LED_B
initial
begin
	LED_B = 1'b0;
	LED_B = #1400000 1'b1;
	LED_B = #100000 1'b0;
end 
endmodule

